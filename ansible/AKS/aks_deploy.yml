# Description
# ===========
# Use this playbook to 
# - git clone and build a sample java app into docker image
# - Push the image into ACR
# - Deploy the image into AKS
#
# Use aci_create playbook to create ACR first
#
# Dependencies
# ============
# - maven on ansible host
# - git on ansible host
# - docker on ansible host

- hosts: localhost
  vars_files:
  - aks_vars.yml
  
  tasks:
    - include: get_dbtoken.yml
    
    - name: Removing
      file:
        path: "{{ workspace }}"
        state: absent

    - name: Git Clone
      git:
        repo: "{{ repo_url }}"
        dest: "{{ workspace }}"
      
    - name: update uri
      lineinfile:
        dest: "{{ workspace }}/src/main/resources/application.properties"
        regexp: '^azure.cosmosdb.uri='
        line: "{{ dburi }}"

    - name: update key
      lineinfile:
        dest: "{{ workspace }}/src/main/resources/application.properties"
        regexp: '^azure.cosmosdb.key='
        line: "{{ dbkey }}"

    - name: update db name
      lineinfile:
        dest: "{{ workspace }}/src/main/resources/application.properties"
        regexp: '^azure.cosmosdb.database='
        line: "{{ dbstring }}"

    - name: Build sample app
      shell: mvn package chdir="{{ workspace }}"
      
    - name: Get Azure Container Registry Password
      azure_rm_containerregistry:
        resource_group: "{{ resource_group }}"
        name: "{{ registry_name }}"
        admin_user_enabled: True
        sku: Standard
      register: acr_result
    
    - name: Login docker registry
      docker_login:
        registry: "{{ registry_name }}.azurecr.io"
        username: "{{ registry_name }}"
        password: "{{ acr_result.credentials.password }}"
        email: "{{ email }}"
    
    - name: Docker Build and Push
      docker_image:
        path: "{{ workspace }}"
        name: "{{ registry_name }}.azurecr.io/{{ image_name }}"
        push: yes    

    - name: Get AKS config
      azure_rm_aks:
        name: "{{ resource_name }}"
        resource_group: "{{ resource_group }}"
        location: eastus
        dns_prefix: "{{ resource_name }}"
        service_principal:
          client_id: "{{ AZURE_CLIENT_ID }}"
          client_secret: "{{ AZURE_SECRET }}"
        linux_profile:
          admin_username: azureuser
          ssh_key: "{{ SSH_PUBLIC_KEY }}"
        agent_pool_profiles:
          - name: default
            count: 1
            vm_size: Standard_DS1_v2
      register: aks

    - name: Save kubeconfig
      copy:
        content: "{{ aks.kube_config }}"
        dest: "{{ workspace }}/config"

    - name: Prepare k8s.yaml
      shell: sed -e "s/YourACRName/{{ registry_name}}/g" -e "s/YourImageName/{{ image_name }}/g" {{ workspace }}/ansible/AKS/k8s.yaml > {{ workspace }}/ansible/AKS/k8s1.yaml

    - name: Deploy to AKS
      k8s_raw:
        state: present
        force: true
        kubeconfig: "{{ workspace }}/config"
        src: "{{ workspace }}/ansible/AKS/k8s1.yaml"